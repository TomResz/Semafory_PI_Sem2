package semaphores;

import java.util.concurrent.Semaphore;

import static semaphores.Threading.startThread;

public class ABCWithSem {

    static final PrettyPrinter printer = new PrettyPrinter(5);
    static final int COUNT = 30;

    static final Semaphore a = new Semaphore(0);
    static final Semaphore b = new Semaphore(2);
    static final Semaphore c = new Semaphore(0);
    static final Semaphore d = new Semaphore(0);

    public static void main(String[] args) {
        startThread(() -> runA());
        startThread(() -> runB());
        startThread(() -> runC());
        startThread(() -> runD());
    }

    static void runA() throws InterruptedException {
        for (int i = 0; i < COUNT+30; i++) {
            a.acquire(); // acquire to odpowiednik P(a)
            printer.output("A ");
            b.release(); // release to odpowiednik V(b)
        }
    }

    static void runB() throws InterruptedException {
        for (int i = 0; i < COUNT; i++) {
            b.acquire(2); // P(b)
            printer.output("B ");
            d.release(2); // V(c)
        }
    }

    ;

    static void runC() throws InterruptedException {
        for (int i = 0; i < COUNT; i++) {
            c.acquire(2); // P(c)
            printer.output("C ");
            a.release(2); // V(a)
        }
    }

    ;
    static void runD() throws InterruptedException {
        for (int i = 0; i < COUNT; i++) {
           d.acquire(2); // P(c)
            printer.output("D ");
            c.release(2); // V(a)
        }
    }

    ;
}
